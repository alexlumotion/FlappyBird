using UnityEngine;

public class GameScoreManager : MonoBehaviour
{
    public static GameScoreManager Instance { get; private set; }

    private int score = 0;
    public int CurrentScore => score;

    public delegate void ScoreChanged(int newScore);
    public event ScoreChanged OnScoreChanged;
    public delegate void FinalScoreChanged(int newScore);
    public event FinalScoreChanged OnFinalScoreChanged;
    public delegate void MaxScoreLoaded(int newScore);
    public event MaxScoreLoaded OnMaxScoreLoaded;

    public delegate void ComboMultiplierChanged(int newMultiplier);
    public event ComboMultiplierChanged OnComboMultiplierChanged;

    private ScoreSourceType lastSourceType = ScoreSourceType.type1;
    private int consecutiveSameTypeCount = 0;

    [Tooltip("–°–∫—ñ–ª—å–∫–∏ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –ø—ñ–¥—Ä—è–¥ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç—É –∫–æ–º–±–æ")]
    public int comboThreshold = 3;

    private int currentComboMultiplier = 1;
    public int CurrentComboMultiplier => currentComboMultiplier;

    public int maxPlayerScore = 0;

    void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }

        Instance = this;
        DontDestroyOnLoad(gameObject);
    }

    void Start()
    {
        LoadMaxScore();
    }

    void LoadMaxScore()
    {
        maxPlayerScore = PlayerPrefs.GetInt("player_score", 15);
        OnMaxScoreLoaded?.Invoke(maxPlayerScore);
    }

    void SaveMaxScore()
    {
        if (score > maxPlayerScore)
        {
            PlayerPrefs.SetInt("player_score", score);
            PlayerPrefs.Save(); // –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ, –∞–ª–µ –∫—Ä–∞—â–µ —è–≤–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏
        }
    }

    public void AddScore(int baseAmount, ScoreSourceType sourceType)
    {
        if (sourceType == lastSourceType)
        {
            consecutiveSameTypeCount++;
        }
        else
        {
            lastSourceType = sourceType;
            consecutiveSameTypeCount = 1;
        }

        // üî¢ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –º–Ω–æ–∂–Ω–∏–∫: 3 ‚Üí x2, 6 ‚Üí x3, 9 ‚Üí x4, ...
        int calculatedMultiplier = (consecutiveSameTypeCount >= comboThreshold)
            ? 1 + (consecutiveSameTypeCount - comboThreshold + 1) / comboThreshold
            : 1;

        if (calculatedMultiplier != currentComboMultiplier)
        {
            currentComboMultiplier = calculatedMultiplier;
            OnComboMultiplierChanged?.Invoke(currentComboMultiplier);
        }

        int finalScore = baseAmount * currentComboMultiplier;
        score += finalScore;

        //Debug.Log($"üü° +{finalScore} –æ—á–æ–∫ (–º–Ω–æ–∂–Ω–∏–∫ x{currentComboMultiplier}) ‚Üí –∑–∞–≥–∞–ª–æ–º: {score}");

        OnScoreChanged?.Invoke(score);
    }

    public void ResetScore()
    {
        score = 0;
        consecutiveSameTypeCount = 0;
        lastSourceType = ScoreSourceType.type1;

        currentComboMultiplier = 1;
        OnComboMultiplierChanged?.Invoke(currentComboMultiplier);

        //Debug.Log("üîÅ –û—á–∫–∏ —Å–∫–∏–Ω—É—Ç–æ");
        OnScoreChanged?.Invoke(score);
    }

    public void ShowFinalScore()
    {
        OnFinalScoreChanged?.Invoke(score);
    }

    public int GetScore()
    {
        return score;
    }

    public void GameOver()
    {
        SaveMaxScore();
        LoadMaxScore();
        ShowFinalScore();
        ResetScore();
    }

}
