using UnityEngine;
using System;

public enum GameStateMy
{
    Idle,
    Playing,
    Paused,
    GameOver
}

public class GameStateManager : MonoBehaviour
{
    // Singleton
    public static GameStateManager Instance { get; private set; }

    // –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –≥—Ä–∏
    private GameStateMy currentState = GameStateMy.Idle;

    // –Ü–≤–µ–Ω—Ç: –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω—É —Å—Ç–∞–Ω—É –≥—Ä–∏
    public event Action<GameStateMy> OnGameStateChanged;

    public GameStateMy CurrentState => currentState;

    void Awake()
    {
        // Singleton —ñ–Ω—Å—Ç–∞–Ω—Å
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }

        Instance = this;
        DontDestroyOnLoad(gameObject);
    }


    /// <summary>
    /// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –≥—Ä–∏
    /// </summary>
    public void SetState(GameStateMy newState)
    {
        if (currentState == newState) return;

        currentState = newState;
        //Debug.Log($"üîÅ GameState –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {currentState}");

        // –í–∏–∫–ª–∏–∫ —ñ–≤–µ–Ω—Ç—É
        OnGameStateChanged?.Invoke(currentState);
    }

    /// <summary>
    /// –£—Ç–∏–ª—ñ—Ç–∏ ‚Äî –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –º—ñ—Å—Ü—è
    /// </summary>
    ///  Idle, Playing, Paused, GameOver
    /// 
    public void StartGame() => SetState(GameStateMy.Playing);
    public void PauseGame() => SetState(GameStateMy.Paused);
    public void ResumeGame() => SetState(GameStateMy.Playing);
    public void RestartGame() => SetState(GameStateMy.GameOver);
    public void GameOver() => SetState(GameStateMy.GameOver);
    public void SetIdle() => SetState(GameStateMy.Idle);
}
