using UnityEngine;
using System;

public enum ObstacleType
{
    Obstacle,
    Bonus
}

public class GameObstacleBehaviour : MonoBehaviour
{
    [Header("Type Settings")]
    public ObstacleType obstacleType = ObstacleType.Obstacle;

    [Header("Return to pool")]
    private GameObstacleRowManager poolManager;
    public float returnThresholdZ = 0f;
    private bool canReturnToPool = false;

    [Header("Back to pools")]
    public Vector3 resetScale = new Vector3(1, 0, 1);

    public GameObstacleAnimations animations;

    void Update()
    {
        // üìâ –ö–æ–ª–∏ –æ–± º—î–∫—Ç –ø–µ—Ä–µ–π—à–æ–≤ –ø–æ—Ä—ñ–≥ –ø–æ Z ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
        if (canReturnToPool && transform.position.z >= returnThresholdZ)
        {
            canReturnToPool = false; // ‚õî —â–æ–± –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–ª–∏–∫–∞–ª–æ—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
            transform.localScale = resetScale;
            poolManager.ReturnToPool(gameObject);
        }
    }

    void Start()
    {
        poolManager = GameObstacleRowManager.Instance;
        animations = GetComponent<GameObstacleAnimations>();
    }

    public void Init()
    {
        canReturnToPool = true;
    }

    public void StopAnimations()
    {
        animations.StopAnimations();
    }

    // 1Ô∏è‚É£ –ó–Ω–∏–∫–Ω–µ–Ω–Ω—è (scale 1 ‚Üí 0) –∑ –∫–æ–ª–±–µ–∫–æ–º
    public void PlayDisappearAnimation(Action onComplete = null)
    {
        animations.PlayDisappearAnimation(onComplete);
    }

    // 2Ô∏è‚É£ –ü–æ—è–≤–∞ (scale 0 ‚Üí 1)
    public void PlayAppearAnimation(Action onComplete = null)
    {
        animations.PlayAppearAnimation(onComplete);
    }

    // ‚ôæÔ∏è Idle "–¥–∏—Ö–∞–Ω–Ω—è"
    public void PlayIdleAnimation()
    {
        animations.PlayIdleAnimation();
    }
    
}